

//Adjacency Matrix


public class Main
{
    int vertex;
    int matrix[][];
    
    public Main(int vertex){
        this.vertex=vertex;
        matrix=new int[vertex][vertex];
    }
    
    public void addEdge(int source,int Destination){
        matrix[source][Destination]=1;
        matrix[Destination][source]=1;
        }
    
    public void printGraph(){
        for(int i=0;i<vertex;i++)
        {
        for(int j=0;j<vertex;j++){
            System.out.print(matrix[i][j]+" ");
            }
            System.out.println(" ");
        }
        
        
        for(int i=0;i<vertex;i++){
            System.out.print("vertex" + i + "is connected to : ");
            for(int j=0;j<vertex;j++){
                if(matrix[i][j]==1){
                System.out.print(j+" ");}
            }
            System.out.println();
        }
        
    
    }
    
    public static void main(String[] args) {
        Main m=new Main(5);
        m.addEdge(0,1);
        m.addEdge(0,2);
        m.addEdge(1,4);
        m.addEdge(1,2);
        m.addEdge(2,3);
        m.addEdge(3,4);
		m.printGraph();
		
	}
}




// Adjacency List


import java.util.LinkedList;
 public class Main
{
    int vertex;
    LinkedList<Integer> list[];
    
    public Main(int vertex){
        this.vertex=vertex;
        list = new LinkedList[vertex];
    
    for(int i=0;i<vertex;i++){
        list[i]=new LinkedList<>();
    }
    }
    
    public void addEdge(int source,int Destination){
        list[source].addFirst(Destination);
        list[Destination].addFirst(source);
        }
        
        
    
    public void printGraph(){
      for(int i=0;i<vertex;i++){
            if(list[i].size()>0){
            System.out.print("vertex " +  i + " is connected to : ");
            for(int j=0;j<list[i].size();j++){
            System.out.print(" -> "+list[i].get(j));
            }
            
            System.out.println();
        }
        
        }
    }
    
    public static void main(String[] args) {
        Main m=new Main(5);
        m.addEdge(0,1);
        m.addEdge(0,2);
        m.addEdge(1,4);
        m.addEdge(1,2);
        m.addEdge(2,3);
        m.addEdge(3,4);
		m.printGraph();
		
	}
}
















































